/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.pod4dev.libpodj.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.pod4dev.libpodj.JSON;

/**
 * VolumeCreateOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VolumeCreateOptions implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_DRIVER = "Driver";
  @SerializedName(SERIALIZED_NAME_DRIVER)
  private String driver;

  public static final String SERIALIZED_NAME_IGNORE_IF_EXISTS = "IgnoreIfExists";
  @SerializedName(SERIALIZED_NAME_IGNORE_IF_EXISTS)
  private Boolean ignoreIfExists;

  public static final String SERIALIZED_NAME_LABEL = "Label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private Map<String, String> label = null;

  public static final String SERIALIZED_NAME_LABELS = "Labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = null;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "Options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Map<String, String> options = null;

  public VolumeCreateOptions() {
  }

  public VolumeCreateOptions driver(String driver) {
    
    this.driver = driver;
    return this;
  }

   /**
   * Volume driver to use
   * @return driver
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Volume driver to use")

  public String getDriver() {
    return driver;
  }


  public void setDriver(String driver) {
    this.driver = driver;
  }


  public VolumeCreateOptions ignoreIfExists(Boolean ignoreIfExists) {
    
    this.ignoreIfExists = ignoreIfExists;
    return this;
  }

   /**
   * Ignore existing volumes
   * @return ignoreIfExists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ignore existing volumes")

  public Boolean getIgnoreIfExists() {
    return ignoreIfExists;
  }


  public void setIgnoreIfExists(Boolean ignoreIfExists) {
    this.ignoreIfExists = ignoreIfExists;
  }


  public VolumeCreateOptions label(Map<String, String> label) {
    
    this.label = label;
    return this;
  }

  public VolumeCreateOptions putLabelItem(String key, String labelItem) {
    if (this.label == null) {
      this.label = new HashMap<>();
    }
    this.label.put(key, labelItem);
    return this;
  }

   /**
   * User-defined key/value metadata. Provided for compatibility
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User-defined key/value metadata. Provided for compatibility")

  public Map<String, String> getLabel() {
    return label;
  }


  public void setLabel(Map<String, String> label) {
    this.label = label;
  }


  public VolumeCreateOptions labels(Map<String, String> labels) {
    
    this.labels = labels;
    return this;
  }

  public VolumeCreateOptions putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * User-defined key/value metadata. Preferred field, will override Label
   * @return labels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User-defined key/value metadata. Preferred field, will override Label")

  public Map<String, String> getLabels() {
    return labels;
  }


  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public VolumeCreateOptions name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * New volume&#39;s name. Can be left blank
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "New volume's name. Can be left blank")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public VolumeCreateOptions options(Map<String, String> options) {
    
    this.options = options;
    return this;
  }

  public VolumeCreateOptions putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

   /**
   * Mapping of driver options and values.
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mapping of driver options and values.")

  public Map<String, String> getOptions() {
    return options;
  }


  public void setOptions(Map<String, String> options) {
    this.options = options;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeCreateOptions volumeCreateOptions = (VolumeCreateOptions) o;
    return Objects.equals(this.driver, volumeCreateOptions.driver) &&
        Objects.equals(this.ignoreIfExists, volumeCreateOptions.ignoreIfExists) &&
        Objects.equals(this.label, volumeCreateOptions.label) &&
        Objects.equals(this.labels, volumeCreateOptions.labels) &&
        Objects.equals(this.name, volumeCreateOptions.name) &&
        Objects.equals(this.options, volumeCreateOptions.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(driver, ignoreIfExists, label, labels, name, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeCreateOptions {\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    ignoreIfExists: ").append(toIndentedString(ignoreIfExists)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Driver");
    openapiFields.add("IgnoreIfExists");
    openapiFields.add("Label");
    openapiFields.add("Labels");
    openapiFields.add("Name");
    openapiFields.add("Options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VolumeCreateOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (VolumeCreateOptions.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeCreateOptions is not found in the empty JSON string", VolumeCreateOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VolumeCreateOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeCreateOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Driver") != null && !jsonObj.get("Driver").isJsonNull()) && !jsonObj.get("Driver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Driver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Driver").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeCreateOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeCreateOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeCreateOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeCreateOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeCreateOptions>() {
           @Override
           public void write(JsonWriter out, VolumeCreateOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeCreateOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VolumeCreateOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VolumeCreateOptions
  * @throws IOException if the JSON string is invalid with respect to VolumeCreateOptions
  */
  public static VolumeCreateOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeCreateOptions.class);
  }

 /**
  * Convert an instance of VolumeCreateOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

