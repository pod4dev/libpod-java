/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.pod4dev.libpodj.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.pod4dev.libpodj.model.IDMappingOptions;
import io.github.pod4dev.libpodj.model.Namespace;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ContainerSecurityConfig
 */
public class ContainerSecurityConfigTest {
    private final ContainerSecurityConfig model = new ContainerSecurityConfig();

    /**
     * Model tests for ContainerSecurityConfig
     */
    @Test
    public void testContainerSecurityConfig() {
        // TODO: test ContainerSecurityConfig
    }

    /**
     * Test the property 'apparmorProfile'
     */
    @Test
    public void apparmorProfileTest() {
        // TODO: test apparmorProfile
    }

    /**
     * Test the property 'capAdd'
     */
    @Test
    public void capAddTest() {
        // TODO: test capAdd
    }

    /**
     * Test the property 'capDrop'
     */
    @Test
    public void capDropTest() {
        // TODO: test capDrop
    }

    /**
     * Test the property 'groups'
     */
    @Test
    public void groupsTest() {
        // TODO: test groups
    }

    /**
     * Test the property 'idmappings'
     */
    @Test
    public void idmappingsTest() {
        // TODO: test idmappings
    }

    /**
     * Test the property 'labelNested'
     */
    @Test
    public void labelNestedTest() {
        // TODO: test labelNested
    }

    /**
     * Test the property 'mask'
     */
    @Test
    public void maskTest() {
        // TODO: test mask
    }

    /**
     * Test the property 'noNewPrivileges'
     */
    @Test
    public void noNewPrivilegesTest() {
        // TODO: test noNewPrivileges
    }

    /**
     * Test the property 'privileged'
     */
    @Test
    public void privilegedTest() {
        // TODO: test privileged
    }

    /**
     * Test the property 'procfsOpts'
     */
    @Test
    public void procfsOptsTest() {
        // TODO: test procfsOpts
    }

    /**
     * Test the property 'readOnlyFilesystem'
     */
    @Test
    public void readOnlyFilesystemTest() {
        // TODO: test readOnlyFilesystem
    }

    /**
     * Test the property 'readWriteTmpfs'
     */
    @Test
    public void readWriteTmpfsTest() {
        // TODO: test readWriteTmpfs
    }

    /**
     * Test the property 'seccompPolicy'
     */
    @Test
    public void seccompPolicyTest() {
        // TODO: test seccompPolicy
    }

    /**
     * Test the property 'seccompProfilePath'
     */
    @Test
    public void seccompProfilePathTest() {
        // TODO: test seccompProfilePath
    }

    /**
     * Test the property 'selinuxOpts'
     */
    @Test
    public void selinuxOptsTest() {
        // TODO: test selinuxOpts
    }

    /**
     * Test the property 'umask'
     */
    @Test
    public void umaskTest() {
        // TODO: test umask
    }

    /**
     * Test the property 'unmask'
     */
    @Test
    public void unmaskTest() {
        // TODO: test unmask
    }

    /**
     * Test the property 'user'
     */
    @Test
    public void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'userns'
     */
    @Test
    public void usernsTest() {
        // TODO: test userns
    }

}
