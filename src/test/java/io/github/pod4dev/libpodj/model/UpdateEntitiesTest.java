/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.pod4dev.libpodj.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.pod4dev.libpodj.model.LinuxBlockIO;
import io.github.pod4dev.libpodj.model.LinuxCPU;
import io.github.pod4dev.libpodj.model.LinuxDeviceCgroup;
import io.github.pod4dev.libpodj.model.LinuxHugepageLimit;
import io.github.pod4dev.libpodj.model.LinuxMemory;
import io.github.pod4dev.libpodj.model.LinuxNetwork;
import io.github.pod4dev.libpodj.model.LinuxPids;
import io.github.pod4dev.libpodj.model.LinuxRdma;
import io.github.pod4dev.libpodj.model.ThrottleDevice;
import io.github.pod4dev.libpodj.model.WeightDevice;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UpdateEntities
 */
public class UpdateEntitiesTest {
    private final UpdateEntities model = new UpdateEntities();

    /**
     * Model tests for UpdateEntities
     */
    @Test
    public void testUpdateEntities() {
        // TODO: test UpdateEntities
    }

    /**
     * Test the property 'blkIOWeightDevice'
     */
    @Test
    public void blkIOWeightDeviceTest() {
        // TODO: test blkIOWeightDevice
    }

    /**
     * Test the property 'deviceReadBPs'
     */
    @Test
    public void deviceReadBPsTest() {
        // TODO: test deviceReadBPs
    }

    /**
     * Test the property 'deviceReadIOPs'
     */
    @Test
    public void deviceReadIOPsTest() {
        // TODO: test deviceReadIOPs
    }

    /**
     * Test the property 'deviceWriteBPs'
     */
    @Test
    public void deviceWriteBPsTest() {
        // TODO: test deviceWriteBPs
    }

    /**
     * Test the property 'deviceWriteIOPs'
     */
    @Test
    public void deviceWriteIOPsTest() {
        // TODO: test deviceWriteIOPs
    }

    /**
     * Test the property 'blockIO'
     */
    @Test
    public void blockIOTest() {
        // TODO: test blockIO
    }

    /**
     * Test the property 'cpu'
     */
    @Test
    public void cpuTest() {
        // TODO: test cpu
    }

    /**
     * Test the property 'devices'
     */
    @Test
    public void devicesTest() {
        // TODO: test devices
    }

    /**
     * Test the property 'healthCmd'
     */
    @Test
    public void healthCmdTest() {
        // TODO: test healthCmd
    }

    /**
     * Test the property 'healthInterval'
     */
    @Test
    public void healthIntervalTest() {
        // TODO: test healthInterval
    }

    /**
     * Test the property 'healthLogDestination'
     */
    @Test
    public void healthLogDestinationTest() {
        // TODO: test healthLogDestination
    }

    /**
     * Test the property 'healthMaxLogCount'
     */
    @Test
    public void healthMaxLogCountTest() {
        // TODO: test healthMaxLogCount
    }

    /**
     * Test the property 'healthMaxLogSize'
     */
    @Test
    public void healthMaxLogSizeTest() {
        // TODO: test healthMaxLogSize
    }

    /**
     * Test the property 'healthOnFailure'
     */
    @Test
    public void healthOnFailureTest() {
        // TODO: test healthOnFailure
    }

    /**
     * Test the property 'healthRetries'
     */
    @Test
    public void healthRetriesTest() {
        // TODO: test healthRetries
    }

    /**
     * Test the property 'healthStartPeriod'
     */
    @Test
    public void healthStartPeriodTest() {
        // TODO: test healthStartPeriod
    }

    /**
     * Test the property 'healthStartupCmd'
     */
    @Test
    public void healthStartupCmdTest() {
        // TODO: test healthStartupCmd
    }

    /**
     * Test the property 'healthStartupInterval'
     */
    @Test
    public void healthStartupIntervalTest() {
        // TODO: test healthStartupInterval
    }

    /**
     * Test the property 'healthStartupRetries'
     */
    @Test
    public void healthStartupRetriesTest() {
        // TODO: test healthStartupRetries
    }

    /**
     * Test the property 'healthStartupSuccess'
     */
    @Test
    public void healthStartupSuccessTest() {
        // TODO: test healthStartupSuccess
    }

    /**
     * Test the property 'healthStartupTimeout'
     */
    @Test
    public void healthStartupTimeoutTest() {
        // TODO: test healthStartupTimeout
    }

    /**
     * Test the property 'healthTimeout'
     */
    @Test
    public void healthTimeoutTest() {
        // TODO: test healthTimeout
    }

    /**
     * Test the property 'hugepageLimits'
     */
    @Test
    public void hugepageLimitsTest() {
        // TODO: test hugepageLimits
    }

    /**
     * Test the property 'memory'
     */
    @Test
    public void memoryTest() {
        // TODO: test memory
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'noHealthcheck'
     */
    @Test
    public void noHealthcheckTest() {
        // TODO: test noHealthcheck
    }

    /**
     * Test the property 'pids'
     */
    @Test
    public void pidsTest() {
        // TODO: test pids
    }

    /**
     * Test the property 'rdma'
     */
    @Test
    public void rdmaTest() {
        // TODO: test rdma
    }

    /**
     * Test the property 'unified'
     */
    @Test
    public void unifiedTest() {
        // TODO: test unified
    }

}
