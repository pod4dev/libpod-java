/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.pod4dev.libpodj.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.pod4dev.libpodj.model.InspectBlkioThrottleDevice;
import io.github.pod4dev.libpodj.model.InspectBlkioWeightDevice;
import io.github.pod4dev.libpodj.model.InspectDevice;
import io.github.pod4dev.libpodj.model.InspectMount;
import io.github.pod4dev.libpodj.model.InspectPodContainerInfo;
import io.github.pod4dev.libpodj.model.InspectPodInfraConfig;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for InspectPodData
 */
public class InspectPodDataTest {
    private final InspectPodData model = new InspectPodData();

    /**
     * Model tests for InspectPodData
     */
    @Test
    public void testInspectPodData() {
        // TODO: test InspectPodData
    }

    /**
     * Test the property 'cgroupParent'
     */
    @Test
    public void cgroupParentTest() {
        // TODO: test cgroupParent
    }

    /**
     * Test the property 'cgroupPath'
     */
    @Test
    public void cgroupPathTest() {
        // TODO: test cgroupPath
    }

    /**
     * Test the property 'containers'
     */
    @Test
    public void containersTest() {
        // TODO: test containers
    }

    /**
     * Test the property 'createCgroup'
     */
    @Test
    public void createCgroupTest() {
        // TODO: test createCgroup
    }

    /**
     * Test the property 'createCommand'
     */
    @Test
    public void createCommandTest() {
        // TODO: test createCommand
    }

    /**
     * Test the property 'createInfra'
     */
    @Test
    public void createInfraTest() {
        // TODO: test createInfra
    }

    /**
     * Test the property 'created'
     */
    @Test
    public void createdTest() {
        // TODO: test created
    }

    /**
     * Test the property 'exitPolicy'
     */
    @Test
    public void exitPolicyTest() {
        // TODO: test exitPolicy
    }

    /**
     * Test the property 'hostname'
     */
    @Test
    public void hostnameTest() {
        // TODO: test hostname
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'infraConfig'
     */
    @Test
    public void infraConfigTest() {
        // TODO: test infraConfig
    }

    /**
     * Test the property 'infraContainerID'
     */
    @Test
    public void infraContainerIDTest() {
        // TODO: test infraContainerID
    }

    /**
     * Test the property 'labels'
     */
    @Test
    public void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'lockNumber'
     */
    @Test
    public void lockNumberTest() {
        // TODO: test lockNumber
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'namespace'
     */
    @Test
    public void namespaceTest() {
        // TODO: test namespace
    }

    /**
     * Test the property 'numContainers'
     */
    @Test
    public void numContainersTest() {
        // TODO: test numContainers
    }

    /**
     * Test the property 'restartPolicy'
     */
    @Test
    public void restartPolicyTest() {
        // TODO: test restartPolicy
    }

    /**
     * Test the property 'sharedNamespaces'
     */
    @Test
    public void sharedNamespacesTest() {
        // TODO: test sharedNamespaces
    }

    /**
     * Test the property 'state'
     */
    @Test
    public void stateTest() {
        // TODO: test state
    }

    /**
     * Test the property 'blkioWeight'
     */
    @Test
    public void blkioWeightTest() {
        // TODO: test blkioWeight
    }

    /**
     * Test the property 'blkioWeightDevice'
     */
    @Test
    public void blkioWeightDeviceTest() {
        // TODO: test blkioWeightDevice
    }

    /**
     * Test the property 'cpuPeriod'
     */
    @Test
    public void cpuPeriodTest() {
        // TODO: test cpuPeriod
    }

    /**
     * Test the property 'cpuQuota'
     */
    @Test
    public void cpuQuotaTest() {
        // TODO: test cpuQuota
    }

    /**
     * Test the property 'cpuShares'
     */
    @Test
    public void cpuSharesTest() {
        // TODO: test cpuShares
    }

    /**
     * Test the property 'cpusetCpus'
     */
    @Test
    public void cpusetCpusTest() {
        // TODO: test cpusetCpus
    }

    /**
     * Test the property 'cpusetMems'
     */
    @Test
    public void cpusetMemsTest() {
        // TODO: test cpusetMems
    }

    /**
     * Test the property 'deviceReadBps'
     */
    @Test
    public void deviceReadBpsTest() {
        // TODO: test deviceReadBps
    }

    /**
     * Test the property 'deviceWriteBps'
     */
    @Test
    public void deviceWriteBpsTest() {
        // TODO: test deviceWriteBps
    }

    /**
     * Test the property 'devices'
     */
    @Test
    public void devicesTest() {
        // TODO: test devices
    }

    /**
     * Test the property 'memoryLimit'
     */
    @Test
    public void memoryLimitTest() {
        // TODO: test memoryLimit
    }

    /**
     * Test the property 'memorySwap'
     */
    @Test
    public void memorySwapTest() {
        // TODO: test memorySwap
    }

    /**
     * Test the property 'mounts'
     */
    @Test
    public void mountsTest() {
        // TODO: test mounts
    }

    /**
     * Test the property 'securityOpt'
     */
    @Test
    public void securityOptTest() {
        // TODO: test securityOpt
    }

    /**
     * Test the property 'volumesFrom'
     */
    @Test
    public void volumesFromTest() {
        // TODO: test volumesFrom
    }

}
