/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.pod4dev.libpodj.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.pod4dev.libpodj.model.InspectBlkioThrottleDevice;
import io.github.pod4dev.libpodj.model.InspectBlkioWeightDevice;
import io.github.pod4dev.libpodj.model.InspectDevice;
import io.github.pod4dev.libpodj.model.InspectHostPort;
import io.github.pod4dev.libpodj.model.InspectIDMappings;
import io.github.pod4dev.libpodj.model.InspectLogConfig;
import io.github.pod4dev.libpodj.model.InspectRestartPolicy;
import io.github.pod4dev.libpodj.model.InspectUlimit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for InspectContainerHostConfig
 */
public class InspectContainerHostConfigTest {
    private final InspectContainerHostConfig model = new InspectContainerHostConfig();

    /**
     * Model tests for InspectContainerHostConfig
     */
    @Test
    public void testInspectContainerHostConfig() {
        // TODO: test InspectContainerHostConfig
    }

    /**
     * Test the property 'annotations'
     */
    @Test
    public void annotationsTest() {
        // TODO: test annotations
    }

    /**
     * Test the property 'autoRemove'
     */
    @Test
    public void autoRemoveTest() {
        // TODO: test autoRemove
    }

    /**
     * Test the property 'autoRemoveImage'
     */
    @Test
    public void autoRemoveImageTest() {
        // TODO: test autoRemoveImage
    }

    /**
     * Test the property 'binds'
     */
    @Test
    public void bindsTest() {
        // TODO: test binds
    }

    /**
     * Test the property 'blkioDeviceReadBps'
     */
    @Test
    public void blkioDeviceReadBpsTest() {
        // TODO: test blkioDeviceReadBps
    }

    /**
     * Test the property 'blkioDeviceReadIOps'
     */
    @Test
    public void blkioDeviceReadIOpsTest() {
        // TODO: test blkioDeviceReadIOps
    }

    /**
     * Test the property 'blkioDeviceWriteBps'
     */
    @Test
    public void blkioDeviceWriteBpsTest() {
        // TODO: test blkioDeviceWriteBps
    }

    /**
     * Test the property 'blkioDeviceWriteIOps'
     */
    @Test
    public void blkioDeviceWriteIOpsTest() {
        // TODO: test blkioDeviceWriteIOps
    }

    /**
     * Test the property 'blkioWeight'
     */
    @Test
    public void blkioWeightTest() {
        // TODO: test blkioWeight
    }

    /**
     * Test the property 'blkioWeightDevice'
     */
    @Test
    public void blkioWeightDeviceTest() {
        // TODO: test blkioWeightDevice
    }

    /**
     * Test the property 'capAdd'
     */
    @Test
    public void capAddTest() {
        // TODO: test capAdd
    }

    /**
     * Test the property 'capDrop'
     */
    @Test
    public void capDropTest() {
        // TODO: test capDrop
    }

    /**
     * Test the property 'cgroup'
     */
    @Test
    public void cgroupTest() {
        // TODO: test cgroup
    }

    /**
     * Test the property 'cgroupConf'
     */
    @Test
    public void cgroupConfTest() {
        // TODO: test cgroupConf
    }

    /**
     * Test the property 'cgroupManager'
     */
    @Test
    public void cgroupManagerTest() {
        // TODO: test cgroupManager
    }

    /**
     * Test the property 'cgroupMode'
     */
    @Test
    public void cgroupModeTest() {
        // TODO: test cgroupMode
    }

    /**
     * Test the property 'cgroupParent'
     */
    @Test
    public void cgroupParentTest() {
        // TODO: test cgroupParent
    }

    /**
     * Test the property 'cgroups'
     */
    @Test
    public void cgroupsTest() {
        // TODO: test cgroups
    }

    /**
     * Test the property 'consoleSize'
     */
    @Test
    public void consoleSizeTest() {
        // TODO: test consoleSize
    }

    /**
     * Test the property 'containerIDFile'
     */
    @Test
    public void containerIDFileTest() {
        // TODO: test containerIDFile
    }

    /**
     * Test the property 'cpuCount'
     */
    @Test
    public void cpuCountTest() {
        // TODO: test cpuCount
    }

    /**
     * Test the property 'cpuPercent'
     */
    @Test
    public void cpuPercentTest() {
        // TODO: test cpuPercent
    }

    /**
     * Test the property 'cpuPeriod'
     */
    @Test
    public void cpuPeriodTest() {
        // TODO: test cpuPeriod
    }

    /**
     * Test the property 'cpuQuota'
     */
    @Test
    public void cpuQuotaTest() {
        // TODO: test cpuQuota
    }

    /**
     * Test the property 'cpuRealtimePeriod'
     */
    @Test
    public void cpuRealtimePeriodTest() {
        // TODO: test cpuRealtimePeriod
    }

    /**
     * Test the property 'cpuRealtimeRuntime'
     */
    @Test
    public void cpuRealtimeRuntimeTest() {
        // TODO: test cpuRealtimeRuntime
    }

    /**
     * Test the property 'cpuShares'
     */
    @Test
    public void cpuSharesTest() {
        // TODO: test cpuShares
    }

    /**
     * Test the property 'cpusetCpus'
     */
    @Test
    public void cpusetCpusTest() {
        // TODO: test cpusetCpus
    }

    /**
     * Test the property 'cpusetMems'
     */
    @Test
    public void cpusetMemsTest() {
        // TODO: test cpusetMems
    }

    /**
     * Test the property 'devices'
     */
    @Test
    public void devicesTest() {
        // TODO: test devices
    }

    /**
     * Test the property 'diskQuota'
     */
    @Test
    public void diskQuotaTest() {
        // TODO: test diskQuota
    }

    /**
     * Test the property 'dns'
     */
    @Test
    public void dnsTest() {
        // TODO: test dns
    }

    /**
     * Test the property 'dnsOptions'
     */
    @Test
    public void dnsOptionsTest() {
        // TODO: test dnsOptions
    }

    /**
     * Test the property 'dnsSearch'
     */
    @Test
    public void dnsSearchTest() {
        // TODO: test dnsSearch
    }

    /**
     * Test the property 'extraHosts'
     */
    @Test
    public void extraHostsTest() {
        // TODO: test extraHosts
    }

    /**
     * Test the property 'groupAdd'
     */
    @Test
    public void groupAddTest() {
        // TODO: test groupAdd
    }

    /**
     * Test the property 'hostsFile'
     */
    @Test
    public void hostsFileTest() {
        // TODO: test hostsFile
    }

    /**
     * Test the property 'idMappings'
     */
    @Test
    public void idMappingsTest() {
        // TODO: test idMappings
    }

    /**
     * Test the property 'ioMaximumBandwidth'
     */
    @Test
    public void ioMaximumBandwidthTest() {
        // TODO: test ioMaximumBandwidth
    }

    /**
     * Test the property 'ioMaximumIOps'
     */
    @Test
    public void ioMaximumIOpsTest() {
        // TODO: test ioMaximumIOps
    }

    /**
     * Test the property 'init'
     */
    @Test
    public void initTest() {
        // TODO: test init
    }

    /**
     * Test the property 'intelRdtClosID'
     */
    @Test
    public void intelRdtClosIDTest() {
        // TODO: test intelRdtClosID
    }

    /**
     * Test the property 'ipcMode'
     */
    @Test
    public void ipcModeTest() {
        // TODO: test ipcMode
    }

    /**
     * Test the property 'isolation'
     */
    @Test
    public void isolationTest() {
        // TODO: test isolation
    }

    /**
     * Test the property 'kernelMemory'
     */
    @Test
    public void kernelMemoryTest() {
        // TODO: test kernelMemory
    }

    /**
     * Test the property 'links'
     */
    @Test
    public void linksTest() {
        // TODO: test links
    }

    /**
     * Test the property 'logConfig'
     */
    @Test
    public void logConfigTest() {
        // TODO: test logConfig
    }

    /**
     * Test the property 'memory'
     */
    @Test
    public void memoryTest() {
        // TODO: test memory
    }

    /**
     * Test the property 'memoryReservation'
     */
    @Test
    public void memoryReservationTest() {
        // TODO: test memoryReservation
    }

    /**
     * Test the property 'memorySwap'
     */
    @Test
    public void memorySwapTest() {
        // TODO: test memorySwap
    }

    /**
     * Test the property 'memorySwappiness'
     */
    @Test
    public void memorySwappinessTest() {
        // TODO: test memorySwappiness
    }

    /**
     * Test the property 'nanoCpus'
     */
    @Test
    public void nanoCpusTest() {
        // TODO: test nanoCpus
    }

    /**
     * Test the property 'networkMode'
     */
    @Test
    public void networkModeTest() {
        // TODO: test networkMode
    }

    /**
     * Test the property 'oomKillDisable'
     */
    @Test
    public void oomKillDisableTest() {
        // TODO: test oomKillDisable
    }

    /**
     * Test the property 'oomScoreAdj'
     */
    @Test
    public void oomScoreAdjTest() {
        // TODO: test oomScoreAdj
    }

    /**
     * Test the property 'pidMode'
     */
    @Test
    public void pidModeTest() {
        // TODO: test pidMode
    }

    /**
     * Test the property 'pidsLimit'
     */
    @Test
    public void pidsLimitTest() {
        // TODO: test pidsLimit
    }

    /**
     * Test the property 'portBindings'
     */
    @Test
    public void portBindingsTest() {
        // TODO: test portBindings
    }

    /**
     * Test the property 'privileged'
     */
    @Test
    public void privilegedTest() {
        // TODO: test privileged
    }

    /**
     * Test the property 'publishAllPorts'
     */
    @Test
    public void publishAllPortsTest() {
        // TODO: test publishAllPorts
    }

    /**
     * Test the property 'readonlyRootfs'
     */
    @Test
    public void readonlyRootfsTest() {
        // TODO: test readonlyRootfs
    }

    /**
     * Test the property 'restartPolicy'
     */
    @Test
    public void restartPolicyTest() {
        // TODO: test restartPolicy
    }

    /**
     * Test the property 'runtime'
     */
    @Test
    public void runtimeTest() {
        // TODO: test runtime
    }

    /**
     * Test the property 'securityOpt'
     */
    @Test
    public void securityOptTest() {
        // TODO: test securityOpt
    }

    /**
     * Test the property 'shmSize'
     */
    @Test
    public void shmSizeTest() {
        // TODO: test shmSize
    }

    /**
     * Test the property 'tmpfs'
     */
    @Test
    public void tmpfsTest() {
        // TODO: test tmpfs
    }

    /**
     * Test the property 'utSMode'
     */
    @Test
    public void utSModeTest() {
        // TODO: test utSMode
    }

    /**
     * Test the property 'ulimits'
     */
    @Test
    public void ulimitsTest() {
        // TODO: test ulimits
    }

    /**
     * Test the property 'usernsMode'
     */
    @Test
    public void usernsModeTest() {
        // TODO: test usernsMode
    }

    /**
     * Test the property 'volumeDriver'
     */
    @Test
    public void volumeDriverTest() {
        // TODO: test volumeDriver
    }

    /**
     * Test the property 'volumesFrom'
     */
    @Test
    public void volumesFromTest() {
        // TODO: test volumesFrom
    }

}
