/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.pod4dev.libpodj.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.pod4dev.libpodj.model.ContainerStore;
import io.github.pod4dev.libpodj.model.ImageStore;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for StoreInfo
 */
public class StoreInfoTest {
    private final StoreInfo model = new StoreInfo();

    /**
     * Model tests for StoreInfo
     */
    @Test
    public void testStoreInfo() {
        // TODO: test StoreInfo
    }

    /**
     * Test the property 'configFile'
     */
    @Test
    public void configFileTest() {
        // TODO: test configFile
    }

    /**
     * Test the property 'containerStore'
     */
    @Test
    public void containerStoreTest() {
        // TODO: test containerStore
    }

    /**
     * Test the property 'graphDriverName'
     */
    @Test
    public void graphDriverNameTest() {
        // TODO: test graphDriverName
    }

    /**
     * Test the property 'graphOptions'
     */
    @Test
    public void graphOptionsTest() {
        // TODO: test graphOptions
    }

    /**
     * Test the property 'graphRoot'
     */
    @Test
    public void graphRootTest() {
        // TODO: test graphRoot
    }

    /**
     * Test the property 'graphRootAllocated'
     */
    @Test
    public void graphRootAllocatedTest() {
        // TODO: test graphRootAllocated
    }

    /**
     * Test the property 'graphRootUsed'
     */
    @Test
    public void graphRootUsedTest() {
        // TODO: test graphRootUsed
    }

    /**
     * Test the property 'graphStatus'
     */
    @Test
    public void graphStatusTest() {
        // TODO: test graphStatus
    }

    /**
     * Test the property 'imageCopyTmpDir'
     */
    @Test
    public void imageCopyTmpDirTest() {
        // TODO: test imageCopyTmpDir
    }

    /**
     * Test the property 'imageStore'
     */
    @Test
    public void imageStoreTest() {
        // TODO: test imageStore
    }

    /**
     * Test the property 'runRoot'
     */
    @Test
    public void runRootTest() {
        // TODO: test runRoot
    }

    /**
     * Test the property 'transientStore'
     */
    @Test
    public void transientStoreTest() {
        // TODO: test transientStore
    }

    /**
     * Test the property 'volumePath'
     */
    @Test
    public void volumePathTest() {
        // TODO: test volumePath
    }

}
