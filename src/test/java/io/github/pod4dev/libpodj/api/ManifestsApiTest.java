/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.pod4dev.libpodj.api;

import io.github.pod4dev.libpodj.ApiException;
import io.github.pod4dev.libpodj.model.ErrorModel;
import io.github.pod4dev.libpodj.model.IdResponse;
import io.github.pod4dev.libpodj.model.LibpodImagesRemoveReport;
import io.github.pod4dev.libpodj.model.ManifestAddOptions;
import io.github.pod4dev.libpodj.model.ManifestModifyOptions;
import io.github.pod4dev.libpodj.model.ManifestModifyReport;
import io.github.pod4dev.libpodj.model.Schema2ListPublic;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * API tests for ManifestsApi
 */
@Disabled
public class ManifestsApiTest {

    private final ManifestsApi api = new ManifestsApi();

    /**
     * Add image
     *
     * Add an image to a manifest list  Deprecated: As of 4.0.0 use ManifestModifyLibpod instead 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manifestAddLibpodTest() throws ApiException {
        String name = null;
        ManifestAddOptions options = null;
        IdResponse response = api.manifestAddLibpod(name)
                .options(options)
                .execute();
        // TODO: test validations
    }

    /**
     * Create
     *
     * Create a manifest list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manifestCreateLibpodTest() throws ApiException {
        String name = null;
        String images = null;
        Boolean all = null;
        Boolean amend = null;
        ManifestModifyOptions options = null;
        IdResponse response = api.manifestCreateLibpod(name, images)
                .all(all)
                .amend(amend)
                .options(options)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete manifest list
     *
     * Delete named manifest list  As of v4.0.0 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manifestDeleteLibpodTest() throws ApiException {
        String name = null;
        Boolean ignore = null;
        LibpodImagesRemoveReport response = api.manifestDeleteLibpod(name)
                .ignore(ignore)
                .execute();
        // TODO: test validations
    }

    /**
     * Exists
     *
     * Check if manifest list exists  Note: There is no contract that the manifest list will exist for a follow-on operation 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manifestExistsLibpodTest() throws ApiException {
        String name = null;
        api.manifestExistsLibpod(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Inspect
     *
     * Display attributes of given manifest list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manifestInspectLibpodTest() throws ApiException {
        String name = null;
        Boolean tlsVerify = null;
        Schema2ListPublic response = api.manifestInspectLibpod(name)
                .tlsVerify(tlsVerify)
                .execute();
        // TODO: test validations
    }

    /**
     * Modify manifest list
     *
     * Add/Remove an image(s) to a manifest list  Note: operations are not atomic when multiple Images are provided.  As of v4.0.0 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manifestModifyLibpodTest() throws ApiException {
        String name = null;
        ManifestModifyOptions options = null;
        Boolean tlsVerify = null;
        ManifestModifyReport response = api.manifestModifyLibpod(name, options)
                .tlsVerify(tlsVerify)
                .execute();
        // TODO: test validations
    }

    /**
     * Push manifest list to registry
     *
     * Push a manifest list or image index to the named registry  As of v4.0.0 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manifestPushLibpodTest() throws ApiException {
        String name = null;
        String destination = null;
        List<String> addCompression = null;
        Boolean forceCompressionFormat = null;
        Boolean all = null;
        Boolean tlsVerify = null;
        Boolean quiet = null;
        IdResponse response = api.manifestPushLibpod(name, destination)
                .addCompression(addCompression)
                .forceCompressionFormat(forceCompressionFormat)
                .all(all)
                .tlsVerify(tlsVerify)
                .quiet(quiet)
                .execute();
        // TODO: test validations
    }

    /**
     * Push manifest to registry
     *
     * Push a manifest list or image index to a registry  Deprecated: As of 4.0.0 use ManifestPushLibpod instead 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manifestPushV3LibpodTest() throws ApiException {
        String name = null;
        String destination = null;
        Boolean all = null;
        IdResponse response = api.manifestPushV3Libpod(name, destination)
                .all(all)
                .execute();
        // TODO: test validations
    }

}
