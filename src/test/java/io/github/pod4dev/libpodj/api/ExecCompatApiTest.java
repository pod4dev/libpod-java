/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.pod4dev.libpodj.api;

import io.github.pod4dev.libpodj.ApiException;
import io.github.pod4dev.libpodj.model.ContainerExecRequest;
import io.github.pod4dev.libpodj.model.ErrorModel;
import io.github.pod4dev.libpodj.model.ExecStartRequest;
import io.github.pod4dev.libpodj.model.InspectExecSession;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * API tests for ExecCompatApi
 */
@Disabled
public class ExecCompatApiTest {

    private final ExecCompatApi api = new ExecCompatApi();

    /**
     * Create an exec instance
     *
     * Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerExecTest() throws ApiException {
        String name = null;
        ContainerExecRequest control = null;
        api.containerExec(name)
                .control(control)
                .execute();
        // TODO: test validations
    }

    /**
     * Inspect an exec instance
     *
     * Return low-level information about an exec instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void execInspectTest() throws ApiException {
        String id = null;
        InspectExecSession response = api.execInspect(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Resize an exec instance
     *
     * Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void execResizeTest() throws ApiException {
        String id = null;
        Integer h = null;
        Integer w = null;
        Boolean running = null;
        api.execResize(id)
                .h(h)
                .w(w)
                .running(running)
                .execute();
        // TODO: test validations
    }

    /**
     * Start an exec instance
     *
     * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void execStartTest() throws ApiException {
        String id = null;
        ExecStartRequest control = null;
        api.execStart(id)
                .control(control)
                .execute();
        // TODO: test validations
    }

}
