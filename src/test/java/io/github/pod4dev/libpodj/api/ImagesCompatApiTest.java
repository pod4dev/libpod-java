/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.pod4dev.libpodj.api;

import io.github.pod4dev.libpodj.ApiException;
import io.github.pod4dev.libpodj.model.ErrorModel;
import java.io.File;
import io.github.pod4dev.libpodj.model.HistoryResponse;
import io.github.pod4dev.libpodj.model.ImageBuild200Response;
import io.github.pod4dev.libpodj.model.ImageDelete200ResponseInner;
import io.github.pod4dev.libpodj.model.ImageInspect;
import io.github.pod4dev.libpodj.model.ImageSearch200Response;
import io.github.pod4dev.libpodj.model.Summary;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * API tests for ImagesCompatApi
 */
@Disabled
public class ImagesCompatApiTest {

    private final ImagesCompatApi api = new ImagesCompatApi();

    /**
     * Create image
     *
     * Build an image from the given Dockerfile(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageBuildTest() throws ApiException {
        String contentType = null;
        String xRegistryConfig = null;
        String dockerfile = null;
        String t = null;
        String extrahosts = null;
        Boolean nohosts = null;
        String remote = null;
        Integer retry = null;
        String retryDelay = null;
        Boolean q = null;
        Boolean compatvolumes = null;
        Boolean nocache = null;
        String cachefrom = null;
        Boolean pull = null;
        Boolean rm = null;
        Boolean forcerm = null;
        Integer memory = null;
        Integer memswap = null;
        Integer cpushares = null;
        String cpusetcpus = null;
        Integer cpuperiod = null;
        Integer cpuquota = null;
        String buildargs = null;
        Integer shmsize = null;
        Boolean squash = null;
        String labels = null;
        String networkmode = null;
        String platform = null;
        String target = null;
        String outputs = null;
        File inputStream = null;
        ImageBuild200Response response = api.imageBuild()
                .contentType(contentType)
                .xRegistryConfig(xRegistryConfig)
                .dockerfile(dockerfile)
                .t(t)
                .extrahosts(extrahosts)
                .nohosts(nohosts)
                .remote(remote)
                .retry(retry)
                .retryDelay(retryDelay)
                .q(q)
                .compatvolumes(compatvolumes)
                .nocache(nocache)
                .cachefrom(cachefrom)
                .pull(pull)
                .rm(rm)
                .forcerm(forcerm)
                .memory(memory)
                .memswap(memswap)
                .cpushares(cpushares)
                .cpusetcpus(cpusetcpus)
                .cpuperiod(cpuperiod)
                .cpuquota(cpuquota)
                .buildargs(buildargs)
                .shmsize(shmsize)
                .squash(squash)
                .labels(labels)
                .networkmode(networkmode)
                .platform(platform)
                .target(target)
                .outputs(outputs)
                .inputStream(inputStream)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an image
     *
     * Create an image by either pulling it from a registry or importing it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageCreateTest() throws ApiException {
        String xRegistryAuth = null;
        String fromImage = null;
        String fromSrc = null;
        String repo = null;
        String tag = null;
        String message = null;
        String platform = null;
        File inputImage = null;
        File response = api.imageCreate()
                .xRegistryAuth(xRegistryAuth)
                .fromImage(fromImage)
                .fromSrc(fromSrc)
                .repo(repo)
                .tag(tag)
                .message(message)
                .platform(platform)
                .inputImage(inputImage)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove Image
     *
     * Delete an image from local storage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageDeleteTest() throws ApiException {
        String name = null;
        Boolean force = null;
        Boolean noprune = null;
        List<ImageDelete200ResponseInner> response = api.imageDelete(name)
                .force(force)
                .noprune(noprune)
                .execute();
        // TODO: test validations
    }

    /**
     * Export an image
     *
     * Export an image in tarball format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageGetTest() throws ApiException {
        String name = null;
        File response = api.imageGet(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Export several images
     *
     * Get a tarball containing all images and metadata for several image repositories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageGetAllTest() throws ApiException {
        String names = null;
        File response = api.imageGetAll(names)
                .execute();
        // TODO: test validations
    }

    /**
     * History of an image
     *
     * Return parent layers of an image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageHistoryTest() throws ApiException {
        String name = null;
        HistoryResponse response = api.imageHistory(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Inspect an image
     *
     * Return low-level information about an image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageInspectTest() throws ApiException {
        String name = null;
        ImageInspect response = api.imageInspect(name)
                .execute();
        // TODO: test validations
    }

    /**
     * List Images
     *
     * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageListTest() throws ApiException {
        Boolean all = null;
        String filters = null;
        Boolean digests = null;
        List<Summary> response = api.imageList()
                .all(all)
                .filters(filters)
                .digests(digests)
                .execute();
        // TODO: test validations
    }

    /**
     * Import image
     *
     * Load a set of images and tags into a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageLoadTest() throws ApiException {
        Boolean quiet = null;
        String request = null;
        api.imageLoad()
                .quiet(quiet)
                .request(request)
                .execute();
        // TODO: test validations
    }

    /**
     * Prune unused images
     *
     * Remove images from local storage that are not being used by a container
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagePruneTest() throws ApiException {
        String filters = null;
        List<ImageDelete200ResponseInner> response = api.imagePrune()
                .filters(filters)
                .execute();
        // TODO: test validations
    }

    /**
     * Push Image
     *
     * Push an image to a container registry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imagePushTest() throws ApiException {
        String name = null;
        String tag = null;
        Boolean all = null;
        Boolean compress = null;
        String destination = null;
        String format = null;
        Boolean tlsVerify = null;
        String xRegistryAuth = null;
        File response = api.imagePush(name)
                .tag(tag)
                .all(all)
                .compress(compress)
                .destination(destination)
                .format(format)
                .tlsVerify(tlsVerify)
                .xRegistryAuth(xRegistryAuth)
                .execute();
        // TODO: test validations
    }

    /**
     * Search images
     *
     * Search registries for an image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageSearchTest() throws ApiException {
        String term = null;
        Integer limit = null;
        String filters = null;
        Boolean tlsVerify = null;
        Boolean listTags = null;
        ImageSearch200Response response = api.imageSearch()
                .term(term)
                .limit(limit)
                .filters(filters)
                .tlsVerify(tlsVerify)
                .listTags(listTags)
                .execute();
        // TODO: test validations
    }

    /**
     * Tag an image
     *
     * Tag an image so that it becomes part of a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageTagTest() throws ApiException {
        String name = null;
        String repo = null;
        String tag = null;
        api.imageTag(name)
                .repo(repo)
                .tag(tag)
                .execute();
        // TODO: test validations
    }

}
